{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n/**\n * Sunrise/sunset script. By Matt Kane. Adopted for NPM use by Alexey Udivankin.\n *\n * Based loosely and indirectly on Kevin Boone's SunTimes Java implementation\n * of the US Naval Observatory's algorithm.\n *\n * Copyright © 2012 Triggertrap Ltd. All rights reserved.\n *\n * This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n * Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option)\n * any later version.\n *\n * This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more\n * details.\n * You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA,\n * or connect to: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html\n */\n\n/**\n * Default zenith\n */\n\nconst DEFAULT_ZENITH = 90.8333;\n/**\n * Degrees per hour\n */\n\nconst DEGREES_PER_HOUR = 360 / 24;\n/**\n * Msec in hour\n */\n\nconst MSEC_IN_HOUR = 60 * 60 * 1000;\n/**\n * Get day of year\n */\n\nfunction getDayOfYear(date) {\n  return Math.ceil((date.getTime() - new Date(date.getFullYear(), 0, 1).getTime()) / 8.64e7);\n}\n/**\n * Get sin of value in deg\n */\n\n\nfunction sinDeg(deg) {\n  return Math.sin(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get acos of value in deg\n */\n\n\nfunction acosDeg(x) {\n  return Math.acos(x) * 360.0 / (2 * Math.PI);\n}\n/**\n * Get asin of value in deg\n */\n\n\nfunction asinDeg(x) {\n  return Math.asin(x) * 360.0 / (2 * Math.PI);\n}\n/**\n * Get tan of value in deg\n */\n\n\nfunction tanDeg(deg) {\n  return Math.tan(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get cos of value in deg\n */\n\n\nfunction cosDeg(deg) {\n  return Math.cos(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get ramainder\n */\n\n\nfunction mod(a, b) {\n  const result = a % b;\n  return result < 0 ? result + b : result;\n}\n/**\n * Calculate Date for either sunrise or sunset\n */\n\n\nfunction calculate(latitude, longitude, isSunrise, zenith, date) {\n  const dayOfYear = getDayOfYear(date);\n  const hoursFromMeridian = longitude / DEGREES_PER_HOUR;\n  const approxTimeOfEventInDays = isSunrise ? dayOfYear + (6 - hoursFromMeridian) / 24 : dayOfYear + (18.0 - hoursFromMeridian) / 24;\n  const sunMeanAnomaly = 0.9856 * approxTimeOfEventInDays - 3.289;\n  const sunTrueLongitude = mod(sunMeanAnomaly + 1.916 * sinDeg(sunMeanAnomaly) + 0.020 * sinDeg(2 * sunMeanAnomaly) + 282.634, 360);\n  const ascension = 0.91764 * tanDeg(sunTrueLongitude);\n  let rightAscension;\n  rightAscension = 360 / (2 * Math.PI) * Math.atan(ascension);\n  rightAscension = mod(rightAscension, 360);\n  const lQuadrant = Math.floor(sunTrueLongitude / 90) * 90;\n  const raQuadrant = Math.floor(rightAscension / 90) * 90;\n  rightAscension = rightAscension + (lQuadrant - raQuadrant);\n  rightAscension /= DEGREES_PER_HOUR;\n  const sinDec = 0.39782 * sinDeg(sunTrueLongitude);\n  const cosDec = cosDeg(asinDeg(sinDec));\n  const cosLocalHourAngle = (cosDeg(zenith) - sinDec * sinDeg(latitude)) / (cosDec * cosDeg(latitude));\n  const localHourAngle = isSunrise ? 360 - acosDeg(cosLocalHourAngle) : acosDeg(cosLocalHourAngle);\n  const localHour = localHourAngle / DEGREES_PER_HOUR;\n  const localMeanTime = localHour + rightAscension - 0.06571 * approxTimeOfEventInDays - 6.622;\n  const time = mod(localMeanTime - longitude / DEGREES_PER_HOUR, 24);\n  const utcMidnight = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()); // Created date will be set to local (system) time zone.\n\n  return new Date(utcMidnight + time * MSEC_IN_HOUR);\n}\n/**\n * Calculate Sunrise time for given longitude, latitude, zenith and date\n */\n\n\nfunction getSunrise(latitude, longitude) {\n  let date = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Date();\n  return calculate(latitude, longitude, true, DEFAULT_ZENITH, date);\n}\n/**\n * Calculate Sunset time for given longitude, latitude, zenith and date\n */\n\n\nfunction getSunset(latitude, longitude) {\n  let date = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Date();\n  return calculate(latitude, longitude, false, DEFAULT_ZENITH, date);\n}\n\nexports.getSunrise = getSunrise;\nexports.getSunset = getSunset;","map":{"version":3,"names":["Object","defineProperty","exports","value","DEFAULT_ZENITH","DEGREES_PER_HOUR","MSEC_IN_HOUR","getDayOfYear","date","Math","ceil","getTime","Date","getFullYear","sinDeg","deg","sin","PI","acosDeg","x","acos","asinDeg","asin","tanDeg","tan","cosDeg","cos","mod","a","b","result","calculate","latitude","longitude","isSunrise","zenith","dayOfYear","hoursFromMeridian","approxTimeOfEventInDays","sunMeanAnomaly","sunTrueLongitude","ascension","rightAscension","atan","lQuadrant","floor","raQuadrant","sinDec","cosDec","cosLocalHourAngle","localHourAngle","localHour","localMeanTime","time","utcMidnight","UTC","getMonth","getDate","getSunrise","getSunset"],"sources":["/Users/nathanwang/Documents/LMC/escape-berlin/node_modules/sunrise-sunset-js/dist/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * Sunrise/sunset script. By Matt Kane. Adopted for NPM use by Alexey Udivankin.\n *\n * Based loosely and indirectly on Kevin Boone's SunTimes Java implementation\n * of the US Naval Observatory's algorithm.\n *\n * Copyright © 2012 Triggertrap Ltd. All rights reserved.\n *\n * This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n * Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option)\n * any later version.\n *\n * This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more\n * details.\n * You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA,\n * or connect to: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html\n */\n/**\n * Default zenith\n */\nconst DEFAULT_ZENITH = 90.8333;\n/**\n * Degrees per hour\n */\nconst DEGREES_PER_HOUR = 360 / 24;\n/**\n * Msec in hour\n */\nconst MSEC_IN_HOUR = 60 * 60 * 1000;\n/**\n * Get day of year\n */\nfunction getDayOfYear(date) {\n    return Math.ceil((date.getTime() - new Date(date.getFullYear(), 0, 1).getTime()) / 8.64e7);\n}\n/**\n * Get sin of value in deg\n */\nfunction sinDeg(deg) {\n    return Math.sin(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get acos of value in deg\n */\nfunction acosDeg(x) {\n    return Math.acos(x) * 360.0 / (2 * Math.PI);\n}\n/**\n * Get asin of value in deg\n */\nfunction asinDeg(x) {\n    return Math.asin(x) * 360.0 / (2 * Math.PI);\n}\n/**\n * Get tan of value in deg\n */\nfunction tanDeg(deg) {\n    return Math.tan(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get cos of value in deg\n */\nfunction cosDeg(deg) {\n    return Math.cos(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get ramainder\n */\nfunction mod(a, b) {\n    const result = a % b;\n    return result < 0\n        ? result + b\n        : result;\n}\n/**\n * Calculate Date for either sunrise or sunset\n */\nfunction calculate(latitude, longitude, isSunrise, zenith, date) {\n    const dayOfYear = getDayOfYear(date);\n    const hoursFromMeridian = longitude / DEGREES_PER_HOUR;\n    const approxTimeOfEventInDays = isSunrise\n        ? dayOfYear + ((6 - hoursFromMeridian) / 24)\n        : dayOfYear + ((18.0 - hoursFromMeridian) / 24);\n    const sunMeanAnomaly = (0.9856 * approxTimeOfEventInDays) - 3.289;\n    const sunTrueLongitude = mod(sunMeanAnomaly + (1.916 * sinDeg(sunMeanAnomaly)) + (0.020 * sinDeg(2 * sunMeanAnomaly)) + 282.634, 360);\n    const ascension = 0.91764 * tanDeg(sunTrueLongitude);\n    let rightAscension;\n    rightAscension = 360 / (2 * Math.PI) * Math.atan(ascension);\n    rightAscension = mod(rightAscension, 360);\n    const lQuadrant = Math.floor(sunTrueLongitude / 90) * 90;\n    const raQuadrant = Math.floor(rightAscension / 90) * 90;\n    rightAscension = rightAscension + (lQuadrant - raQuadrant);\n    rightAscension /= DEGREES_PER_HOUR;\n    const sinDec = 0.39782 * sinDeg(sunTrueLongitude);\n    const cosDec = cosDeg(asinDeg(sinDec));\n    const cosLocalHourAngle = ((cosDeg(zenith)) - (sinDec * (sinDeg(latitude)))) / (cosDec * (cosDeg(latitude)));\n    const localHourAngle = isSunrise\n        ? 360 - acosDeg(cosLocalHourAngle)\n        : acosDeg(cosLocalHourAngle);\n    const localHour = localHourAngle / DEGREES_PER_HOUR;\n    const localMeanTime = localHour + rightAscension - (0.06571 * approxTimeOfEventInDays) - 6.622;\n    const time = mod(localMeanTime - (longitude / DEGREES_PER_HOUR), 24);\n    const utcMidnight = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());\n    // Created date will be set to local (system) time zone.\n    return new Date(utcMidnight + (time * MSEC_IN_HOUR));\n}\n/**\n * Calculate Sunrise time for given longitude, latitude, zenith and date\n */\nfunction getSunrise(latitude, longitude, date = new Date()) {\n    return calculate(latitude, longitude, true, DEFAULT_ZENITH, date);\n}\n/**\n * Calculate Sunset time for given longitude, latitude, zenith and date\n */\nfunction getSunset(latitude, longitude, date = new Date()) {\n    return calculate(latitude, longitude, false, DEFAULT_ZENITH, date);\n}\n\nexports.getSunrise = getSunrise;\nexports.getSunset = getSunset;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}